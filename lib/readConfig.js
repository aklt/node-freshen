// Generated by CoffeeScript 1.12.3
var assert, coffee, defaultConf, defaultMime, fs, log, parseCSON, path, projectRoot, readConfig, readMimeTypes, ref, srArrayToRegexArray, warn, wsStringToArray;

fs = require('fs');

path = require('path');

assert = require('assert');

coffee = require('coffee-script');

ref = require('./logger'), log = ref.log, warn = ref.warn;

projectRoot = path.normalize(__dirname + "/../");

defaultMime = projectRoot + 'mime.types';

defaultConf = projectRoot + 'freshenrc-example';

readMimeTypes = function(mimeTypesFileName, next) {
  return fs.readFile(mimeTypesFileName, function(err, data) {
    var i, j, len, len1, line, ref1, ref2, ref3, result, suffix, suffixes, type;
    if (err) {
      return next(err);
    }
    result = {};
    ref1 = data.toString().split(/[\r\n]+/);
    for (i = 0, len = ref1.length; i < len; i++) {
      line = ref1[i];
      if (!line) {
        continue;
      }
      ref2 = line.split(/\s{2,}/), type = ref2[0], suffixes = ref2[1];
      if (!suffixes) {
        continue;
      }
      ref3 = suffixes.split(/\s+/);
      for (j = 0, len1 = ref3.length; j < len1; j++) {
        suffix = ref3[j];
        result[suffix] = type;
      }
    }
    return next(0, result);
  });
};

parseCSON = function(str) {
  return (new Function(coffee.compile("return {\n" + (str.replace(/^/gm, '  ')) + "}", {
    bare: 1
  })))();
};

wsStringToArray = function(wsString) {
  if (typeof wsString === 'string') {
    return wsString.split(/\s+/);
  }
  return wsString;
};

srArrayToRegexArray = function(srArray) {
  var expr, i, len, ref1, result;
  result = [];
  ref1 = wsStringToArray(srArray);
  for (i = 0, len = ref1.length; i < len; i++) {
    expr = ref1[i];
    if (typeof expr === 'string') {
      result.push(new RegExp(expr + "$", "i"));
    } else {
      result.push(expr);
    }
  }
  return result;
};

module.exports = readConfig = function(configFileName, next) {
  var ensureConfigFilePresence;
  ensureConfigFilePresence = function(next) {
    return fs.exists(configFileName, function(exists) {
      if (!exists) {
        log("Creating " + configFileName + " from " + defaultConf);
        return fs.readFile(defaultConf, function(err, data) {
          if (err) {
            return next(err);
          }
          return fs.writeFile(configFileName, data, function(err) {
            if (err) {
              return next(err);
            }
            return next(0);
          });
        });
      }
      return next(0);
    });
  };
  return ensureConfigFilePresence(function(err) {
    if (err) {
      return next(err);
    }
    return fs.readFile(configFileName, function(err, configData) {
      var configObj;
      if (err) {
        return next(err);
      }
      configObj = (parseCSON(configData.toString())) || {};
      assert(configObj.report && configObj.report.change, "Config: Need report.change in config file");
      assert(configObj.build && configObj.build.command && configObj.build.deps, "Config: Need build.command and build.deps");
      assert(configObj.url, "Config: Need url field in config file");
      return readMimeTypes(configObj.mimeTypesFile || defaultMime, function(err, mimeTypes) {
        var event, extension;
        if (err) {
          return next(err);
        }
        configObj.mimeTypes = mimeTypes;
        configObj.mimeAdd || (configObj.mimeAdd = {});
        for (extension in configObj.mimeAdd) {
          configObj.mimeTypes[extension] = configObj.mimeAdd[extension];
        }
        if (!configObj.root) {
          configObj.root = './';
        }
        for (event in configObj.report) {
          configObj.report[event] = srArrayToRegexArray(configObj.report[event]);
        }
        configObj.report.change.push(new RegExp((configFileName.replace(/^\./g, '\\.')) + "$"));
        configObj.build.deps = srArrayToRegexArray(configObj.build.deps);
        return fs.realpath(path.normalize(configObj.root), {}, function(err, realPath) {
          configObj.root = realPath;
          if (err) {
            return next(err);
          }
          return next(0, configObj);
        });
      });
    });
  });
};
